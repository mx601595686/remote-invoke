"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 发送管理器，负责端口的添加删除，负载均衡
 *
 * @export
 * @class SendingManager
 */
class SendingManager {
    constructor(onMessage, config) {
        this._conPort = []; //注册的连接端口。sending表示当前接口是否正在发送数据
        this._portIndex = 0; //指示使用哪个端口来发送消息
        this._onMessage = onMessage;
        this._loadBalance = config.loadBalance === undefined ? true : config.loadBalance;
    }
    send(data) {
        if (this._conPort.length === 0)
            return Promise.reject(new Error('没有可用的端口来发送消息'));
        else {
            let selectedPort;
            if (this._conPort.length > 1 && this._loadBalance) {
                for (let i = 0, j = this._conPort.length - 1; i < j; i++) {
                    const port = this._conPort[this._portIndex < this._conPort.length ? this._portIndex++ : this._portIndex = 0];
                    if (!port.sending) {
                        selectedPort = port;
                        break;
                    }
                }
                if (selectedPort === undefined) {
                    selectedPort = this._conPort[this._portIndex];
                }
            }
            else {
                selectedPort = this._conPort[0];
            }
            selectedPort.sending = true;
            return selectedPort.port.send(data)
                .then(() => { selectedPort.sending = false; })
                .catch((err) => { selectedPort.sending = false; throw err; });
        }
    }
    /**
     * 添加连接端口。可以添加多个端口，这样流量可以自动分担到每个端口上。如果某个端口被关闭，则它将自动被移除。
     *
     * @param {ConnectionPort} connection 连接端口
     * @memberof RemoteInvoke
     */
    addConnectionPort(connection) {
        if (this._conPort.find(item => item.port === connection))
            throw new Error('相同的端口不可以重复添加');
        connection.onOpen = () => {
            connection.onMessage = this._onMessage;
            connection.onClose = () => this.removeConnectionPort(connection);
            this._conPort.push({ port: connection, sending: false });
        };
    }
    /**
     * 删除连接端口。
     *
     * @param {ConnectionPort} connection 连接端口
     * @returns {boolean}
     * @memberof RemoteInvoke
     */
    removeConnectionPort(connection) {
        this._conPort = this._conPort.filter(item => item.port !== connection);
    }
}
exports.SendingManager = SendingManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsb0JBQW9CLENBQUMsVUFBMEI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDO0NBQ0o7QUF2RUQsd0NBdUVDIiwiZmlsZSI6IlNlbmRpbmdNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VuZGluZ0RhdGEgfSBmcm9tICcuL2NvbW1vbi9TZW5kaW5nRGF0YSc7XHJcbmltcG9ydCB7IENvbm5lY3Rpb25Qb3J0IH0gZnJvbSAnLi9jb21tb24vQ29ubmVjdGlvblBvcnQnO1xyXG5pbXBvcnQgeyBTZW5kaW5nTWFuYWdlckNvbmZpZyB9IGZyb20gJy4vY29tbW9uL1NlbmRpbmdNYW5hZ2VyQ29uZmlnJztcclxuXHJcbi8qKlxyXG4gKiDlj5HpgIHnrqHnkIblmajvvIzotJ/otKPnq6/lj6PnmoTmt7vliqDliKDpmaTvvIzotJ/ovb3lnYfooaFcclxuICogXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIFNlbmRpbmdNYW5hZ2VyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VuZGluZ01hbmFnZXIge1xyXG5cclxuICAgIHByaXZhdGUgX2NvblBvcnQ6IHsgcG9ydDogQ29ubmVjdGlvblBvcnQsIHNlbmRpbmc6IGJvb2xlYW4gfVtdID0gW107IC8v5rOo5YaM55qE6L+e5o6l56uv5Y+j44CCc2VuZGluZ+ihqOekuuW9k+WJjeaOpeWPo+aYr+WQpuato+WcqOWPkemAgeaVsOaNrlxyXG5cclxuICAgIHByaXZhdGUgX3BvcnRJbmRleCA9IDA7ICAgIC8v5oyH56S65L2/55So5ZOq5Liq56uv5Y+j5p2l5Y+R6YCB5raI5oGvXHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbG9hZEJhbGFuY2U6IGJvb2xlYW47IC8v5piv5ZCm5ZCv55So6LSf6L295Z2H6KGhXHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfb25NZXNzYWdlOiAoZGF0YTogU2VuZGluZ0RhdGEpID0+IHZvaWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob25NZXNzYWdlOiAoZGF0YTogU2VuZGluZ0RhdGEpID0+IHZvaWQsIGNvbmZpZzogU2VuZGluZ01hbmFnZXJDb25maWcpIHtcclxuICAgICAgICB0aGlzLl9vbk1lc3NhZ2UgPSBvbk1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5fbG9hZEJhbGFuY2UgPSBjb25maWcubG9hZEJhbGFuY2UgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcubG9hZEJhbGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZChkYXRhOiBTZW5kaW5nRGF0YSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb25Qb3J0Lmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcign5rKh5pyJ5Y+v55So55qE56uv5Y+j5p2l5Y+R6YCB5raI5oGvJykpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRQb3J0OiBhbnk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29uUG9ydC5sZW5ndGggPiAxICYmIHRoaXMuX2xvYWRCYWxhbmNlKSB7ICAgIC8v6LSf6L295Z2H6KGhXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRoaXMuX2NvblBvcnQubGVuZ3RoIC0gMTsgaSA8IGo7IGkrKykgeyAgLy8gLTEg5piv5Li65LqG56Gu5L+d6LWw5a6M5LiA5ZyI77yM5Lmf5LiN5Lya6JC95Yiw5LiK5qyh5L2/55So55qE56uv5Y+j5LiKXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9ydCA9IHRoaXMuX2NvblBvcnRbdGhpcy5fcG9ydEluZGV4IDwgdGhpcy5fY29uUG9ydC5sZW5ndGggPyB0aGlzLl9wb3J0SW5kZXgrKyA6IHRoaXMuX3BvcnRJbmRleCA9IDBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcG9ydC5zZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUG9ydCA9IHBvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRQb3J0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFBvcnQgPSB0aGlzLl9jb25Qb3J0W3RoaXMuX3BvcnRJbmRleF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFBvcnQgPSB0aGlzLl9jb25Qb3J0WzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxlY3RlZFBvcnQuc2VuZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZFBvcnQucG9ydC5zZW5kKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7IHNlbGVjdGVkUG9ydC5zZW5kaW5nID0gZmFsc2UgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyOiBFcnJvcikgPT4geyBzZWxlY3RlZFBvcnQuc2VuZGluZyA9IGZhbHNlOyB0aHJvdyBlcnI7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOi/nuaOpeerr+WPo+OAguWPr+S7pea3u+WKoOWkmuS4querr+WPo++8jOi/meagt+a1gemHj+WPr+S7peiHquWKqOWIhuaLheWIsOavj+S4querr+WPo+S4iuOAguWmguaenOafkOS4querr+WPo+iiq+WFs+mXre+8jOWImeWug+WwhuiHquWKqOiiq+enu+mZpOOAglxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0Nvbm5lY3Rpb25Qb3J0fSBjb25uZWN0aW9uIOi/nuaOpeerr+WPo1xyXG4gICAgICogQG1lbWJlcm9mIFJlbW90ZUludm9rZVxyXG4gICAgICovXHJcbiAgICBhZGRDb25uZWN0aW9uUG9ydChjb25uZWN0aW9uOiBDb25uZWN0aW9uUG9ydCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb25Qb3J0LmZpbmQoaXRlbSA9PiBpdGVtLnBvcnQgPT09IGNvbm5lY3Rpb24pKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ebuOWQjOeahOerr+WPo+S4jeWPr+S7pemHjeWkjea3u+WKoCcpO1xyXG5cclxuICAgICAgICBjb25uZWN0aW9uLm9uT3BlbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29ubmVjdGlvbi5vbk1lc3NhZ2UgPSB0aGlzLl9vbk1lc3NhZ2U7XHJcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ub25DbG9zZSA9ICgpID0+IHRoaXMucmVtb3ZlQ29ubmVjdGlvblBvcnQoY29ubmVjdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvblBvcnQucHVzaCh7IHBvcnQ6IGNvbm5lY3Rpb24sIHNlbmRpbmc6IGZhbHNlIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTov57mjqXnq6/lj6PjgIJcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtDb25uZWN0aW9uUG9ydH0gY29ubmVjdGlvbiDov57mjqXnq6/lj6NcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBcclxuICAgICAqIEBtZW1iZXJvZiBSZW1vdGVJbnZva2VcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQ29ubmVjdGlvblBvcnQoY29ubmVjdGlvbjogQ29ubmVjdGlvblBvcnQpIHtcclxuICAgICAgICB0aGlzLl9jb25Qb3J0ID0gdGhpcy5fY29uUG9ydC5maWx0ZXIoaXRlbSA9PiBpdGVtLnBvcnQgIT09IGNvbm5lY3Rpb24pO1xyXG4gICAgfVxyXG59Il19
