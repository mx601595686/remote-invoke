"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageType_1 = require("../interfaces/MessageType");
const MessageData_1 = require("./MessageData");
const MessageRouting_1 = require("./MessageRouting");
class RemoteInvoke extends MessageRouting_1.MessageRouting {
    /**
     * @param socket 连接端口
     * @param moduleName 当前模块的名称
     */
    constructor(socket, moduleName) {
        if (socket.ri != null)
            throw new Error('传入的ConnectionSocket已在其他地方被使用');
        super(socket, moduleName);
        this._socket.ri = this;
    }
    /**
     * 对外导出方法。
     * 如果要向调用方反馈错误，直接 throw new Error() 即可。
     * 注意：对于导出方法，当它执行完成，返回结果后就不可以再继续下载文件了。
     * 注意：一个path上只允许导出一个方法。如果重复导出则后面的应该覆盖掉前面的。
     * @param path 所导出的路径
     * @param func 导出的方法
     */
    export(path, func) {
        this.cancelExport(path);
        this._messageListener.get([MessageType_1.MessageType.invoke_request, path]).on(async (msg) => {
            const { data, clean } = this._prepare_InvokeReceivingData(msg);
            try {
                const result = await func(data) || { data: null };
                this._send_InvokeResponseMessage(msg, result);
            }
            catch (error) {
                this._send_InvokeFailedMessage(msg, error);
            }
            finally {
                clean();
            }
        });
        return func;
    }
    /**
     * 取消对外导出的方法
     * @param path 之前导出的路径
     */
    cancelExport(path) {
        this._messageListener.get([MessageType_1.MessageType.invoke_request, path]).off();
    }
    invoke(receiver, path, data = { data: null }, callback) {
        if (callback) {
            this._send_InvokeRequestMessage(receiver, path, data).then(msg => {
                const { data, clean } = this._prepare_InvokeReceivingData(msg);
                callback(undefined, data).then(() => {
                    clean();
                    this._send_InvokeFinishMessage(msg);
                }).catch(err => {
                    clean();
                    this._send_InvokeFinishMessage(msg);
                    throw err;
                });
            }).catch(callback);
        }
        else {
            return (async () => {
                const msg = await this._send_InvokeRequestMessage(receiver, path, data);
                const { data: r_data, clean } = this._prepare_InvokeReceivingData(msg);
                try {
                    const result = [];
                    for (const item of r_data.files) {
                        result.push({ name: item.name, data: await item.getFile() });
                    }
                    return { data: r_data.data, files: result };
                }
                catch (error) {
                    throw error;
                }
                finally {
                    clean();
                    this._send_InvokeFinishMessage(msg);
                }
            })();
        }
    }
    /**
     * 注册广播监听器
     * @param sender 发送者
     * @param name 广播的路径
     * @param func 对应的回调方法
     */
    receive(sender, path, func) {
        const layer = this._messageListener.get([MessageType_1.MessageType.broadcast, sender, ...path.split('.')]);
        if (!layer.has())
            this._send_BroadcastOpenMessage(sender, path);
        layer.on(func); //不包装一下监听器，是为了考虑到cancelReceive
        return func;
    }
    /**
     * 删除指定路径上的所有广播监听器，可以传递一个listener来只删除一个特定的监听器
     * @param sender 发送者
     * @param name 广播的路径
     * @param listener 要指定删除的监听器
     */
    cancelReceive(sender, path, listener) {
        const layer = this._messageListener.get([MessageType_1.MessageType.broadcast, sender, ...path.split('.')]);
        if (layer.has(listener)) {
            layer.off(listener);
            if (!layer.has()) {
                this._send_BroadcastCloseMessage(sender, path);
            }
        }
    }
    /**
     * 对外广播数据
     * @param path 广播的路径
     * @param data 要发送的数据
     */
    broadcast(path, data = null) {
        this._send_BroadcastMessage(path, data);
    }
    /**
     * 准备好下载回调。返回InvokeReceivingData与清理资源回调
     */
    _prepare_InvokeReceivingData(msg) {
        const messageID = msg instanceof MessageData_1.InvokeRequestMessage ? msg.requestMessageID : msg.responseMessageID;
        let cleaned = false; //是否下载已被清理
        const files = msg.files.map(item => {
            let start = false; //是否已经开始获取了，主要是用于防止重复下载
            let index = -1; //现在接收到第几个文件片段了
            let downloadedSize = 0; //已下载大小
            const downloadNext = () => {
                if (cleaned)
                    return Promise.reject(new Error('下载终止'));
                index++;
                if (item.splitNumber != null && index >= item.splitNumber) {
                    return Promise.resolve();
                }
                else {
                    return this._send_InvokeFileRequestMessage(msg, item.id, index).then(data => {
                        if (data && item.size != null && (downloadedSize += data.length) > item.size)
                            throw new Error('下载到的文件大小超出了发送者所描述的大小');
                        return data;
                    });
                }
            };
            const result = {
                size: item.size,
                splitNumber: item.splitNumber,
                name: item.name,
                onData: async (callback, startIndex = 0) => {
                    if (start) {
                        callback(new Error('不可重复下载文件'));
                    }
                    else {
                        start = true;
                        index = startIndex - 1;
                        while (true) {
                            try {
                                var data = await downloadNext();
                            }
                            catch (error) {
                                callback(error);
                                break;
                            }
                            if (data) {
                                const isNext = await callback(undefined, false, index, data);
                                if (isNext === true)
                                    break;
                            }
                            else {
                                callback(undefined, true, index, Buffer.alloc(0));
                                break;
                            }
                        }
                    }
                },
                getFile: async () => {
                    if (start) {
                        throw new Error('不可重复下载文件');
                    }
                    else {
                        start = true;
                        const filePieces = []; //下载到的文件片段
                        while (true) {
                            const data = await downloadNext();
                            if (data) {
                                filePieces.push(data);
                            }
                            else {
                                return Buffer.concat(filePieces);
                            }
                        }
                    }
                }
            };
            return result;
        });
        return {
            data: { remoteName: msg.sender, data: msg.data, files },
            clean: () => {
                cleaned = true;
                this._messageListener.get([MessageType_1.MessageType.invoke_file_failed, msg.sender, messageID]).triggerDescendants({ error: '下载终止' });
            }
        };
    }
}
exports.RemoteInvoke = RemoteInvoke;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
