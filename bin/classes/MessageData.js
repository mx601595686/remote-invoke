"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageType_1 = require("../interfaces/MessageType");
/**
 * 所有消息的基类
 */
class MessageData {
    /**
     * 解析消息
     * @param ri RemoteInvoke
     * @param header 已近被JSON.parse后的消息头部
     * @param body 消息body
     */
    static parse(ri, header, body) {
        throw new Error('未实现解析方法');
    }
    /**
     * 创建消息
     */
    static create(ri, ...args) {
        throw new Error('未实现创建方法');
    }
}
exports.MessageData = MessageData;
class InvokeRequestMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_request;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver, this.path]),
            Buffer.from(JSON.stringify([this.requestMessageID, this.data, this.files.map(item => [item.id, item.size, item.splitNumber, item.name])]))
        ];
    }
    static parse(ri, header, body) {
        const irm = new InvokeRequestMessage();
        irm.sender = header[1];
        irm.receiver = header[2];
        irm.path = header[3];
        if (irm.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${irm.sender} ，receiver：${irm.receiver}`);
        if (irm.path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        const p_body = JSON.parse(body.toString());
        irm.requestMessageID = p_body[0];
        irm.data = p_body[1];
        irm.files = p_body[2].map((item) => {
            //确保size与splitNumber的数据类型
            if ((Number.isSafeInteger(item[1]) && item[1] >= 0 || item[1] === null) && (Number.isSafeInteger(item[2]) && item[2] >= 0 || item[2] === null))
                return { id: item[0], size: item[1], splitNumber: item[2], name: item[3] };
            else
                throw new Error('消息数据类型错误');
        });
        return irm;
    }
    static create(ri, messageID, receiver, path, data) {
        if (path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        const irm = new InvokeRequestMessage();
        irm.sender = ri.moduleName;
        irm.receiver = receiver;
        irm.path = path;
        irm.requestMessageID = messageID;
        irm.data = data.data;
        irm.files = data.files == null ? [] : data.files.map((item, index) => Buffer.isBuffer(item.file) ?
            { id: index, size: item.file.length, splitNumber: Math.ceil(item.file.length / ri.filePieceSize), name: item.name, _data: item } :
            { id: index, size: null, splitNumber: null, name: item.name, _data: item });
        return irm;
    }
}
exports.InvokeRequestMessage = InvokeRequestMessage;
class InvokeResponseMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_response;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(JSON.stringify([this.requestMessageID, this.responseMessageID, this.data, this.files.map(item => [item.id, item.size, item.splitNumber, item.name])]))
        ];
    }
    static parse(ri, header, body) {
        const irm = new InvokeResponseMessage();
        irm.sender = header[1];
        irm.receiver = header[2];
        if (irm.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${irm.sender} ，receiver：${irm.receiver}`);
        const p_body = JSON.parse(body.toString());
        irm.requestMessageID = p_body[0];
        irm.responseMessageID = p_body[1];
        irm.data = p_body[2];
        irm.files = p_body[3].map((item) => {
            //确保size与splitNumber的数据类型
            if ((Number.isSafeInteger(item[1]) && item[1] >= 0 || item[1] === null) && (Number.isSafeInteger(item[2]) && item[2] >= 0 || item[2] === null))
                return { id: item[0], size: item[1], splitNumber: item[2], name: item[3] };
            else
                throw new Error('消息数据类型错误');
        });
        return irm;
    }
    static create(ri, rm, messageID, data) {
        const irm = new InvokeResponseMessage();
        irm.sender = ri.moduleName;
        irm.receiver = rm.sender;
        irm.requestMessageID = rm.requestMessageID;
        irm.responseMessageID = messageID;
        irm.data = data.data;
        irm.files = data.files == null ? [] : data.files.map((item, index) => Buffer.isBuffer(item.file) ?
            { id: index, size: item.file.length, splitNumber: Math.ceil(item.file.length / ri.filePieceSize), name: item.name, _data: item } :
            { id: index, size: null, splitNumber: null, name: item.name, _data: item });
        return irm;
    }
}
exports.InvokeResponseMessage = InvokeResponseMessage;
class InvokeFinishMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_finish;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(this.responseMessageID.toString())
        ];
    }
    static parse(ri, header, body) {
        const ifm = new InvokeFinishMessage();
        ifm.sender = header[1];
        ifm.receiver = header[2];
        if (ifm.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${ifm.sender} ，receiver：${ifm.receiver}`);
        ifm.responseMessageID = Number.parseInt(body.toString());
        return ifm;
    }
    static create(ri, rm) {
        const ifm = new InvokeFinishMessage();
        ifm.sender = ri.moduleName;
        ifm.receiver = rm.sender;
        ifm.responseMessageID = rm.responseMessageID;
        return ifm;
    }
}
exports.InvokeFinishMessage = InvokeFinishMessage;
class InvokeFailedMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_failed;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(JSON.stringify([this.requestMessageID, this.error]))
        ];
    }
    static parse(ri, header, body) {
        const ifa = new InvokeFailedMessage();
        ifa.sender = header[1];
        ifa.receiver = header[2];
        if (ifa.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${ifa.sender} ，receiver：${ifa.receiver}`);
        const p_body = JSON.parse(body.toString());
        ifa.requestMessageID = p_body[0];
        ifa.error = p_body[1];
        return ifa;
    }
    static create(ri, rm, err) {
        const ifa = new InvokeFailedMessage();
        ifa.sender = ri.moduleName;
        ifa.receiver = rm.sender;
        ifa.requestMessageID = rm.requestMessageID;
        ifa.error = err.message;
        return ifa;
    }
}
exports.InvokeFailedMessage = InvokeFailedMessage;
class InvokeFileRequestMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_file_request;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(JSON.stringify([this.messageID, this.id, this.index]))
        ];
    }
    static parse(ri, header, body) {
        const ifr = new InvokeFileRequestMessage();
        ifr.sender = header[1];
        ifr.receiver = header[2];
        if (ifr.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${ifr.sender} ，receiver：${ifr.receiver}`);
        const p_body = JSON.parse(body.toString());
        ifr.messageID = p_body[0];
        ifr.id = p_body[1];
        ifr.index = p_body[2];
        if (!Number.isSafeInteger(ifr.index) || ifr.index < 0)
            throw new Error('文件片段索引数据类型错误');
        return ifr;
    }
    static create(ri, rm, id, index) {
        const ifr = new InvokeFileRequestMessage();
        ifr.sender = ri.moduleName;
        ifr.receiver = rm.sender;
        ifr.messageID = rm instanceof InvokeRequestMessage ? rm.requestMessageID : rm.responseMessageID;
        ifr.id = id;
        ifr.index = index;
        return ifr;
    }
}
exports.InvokeFileRequestMessage = InvokeFileRequestMessage;
class InvokeFileResponseMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_file_response;
    }
    pack() {
        const b_json = Buffer.from(JSON.stringify([this.messageID, this.id, this.index]));
        const b_json_length = Buffer.alloc(4);
        b_json_length.writeUInt32BE(b_json.length, 0);
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.concat([b_json_length, b_json, this.data])
        ];
    }
    static parse(ri, header, body) {
        const ifr = new InvokeFileResponseMessage();
        ifr.sender = header[1];
        ifr.receiver = header[2];
        if (ifr.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${ifr.sender} ，receiver：${ifr.receiver}`);
        const b_json_length = body.readUInt32BE(0);
        const b_json = JSON.parse(body.slice(4, 4 + b_json_length).toString());
        ifr.messageID = b_json[0];
        ifr.id = b_json[1];
        ifr.index = b_json[2];
        ifr.data = body.slice(4 + b_json_length);
        if (!Number.isSafeInteger(ifr.index) || ifr.index < 0)
            throw new Error('文件片段索引数据类型错误');
        return ifr;
    }
    static create(ri, rfm, data) {
        const ifr = new InvokeFileResponseMessage();
        ifr.sender = ri.moduleName;
        ifr.receiver = rfm.sender;
        ifr.messageID = rfm.messageID;
        ifr.id = rfm.id;
        ifr.index = rfm.index;
        ifr.data = data;
        return ifr;
    }
}
exports.InvokeFileResponseMessage = InvokeFileResponseMessage;
class InvokeFileFailedMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_file_failed;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(JSON.stringify([this.messageID, this.id, this.error]))
        ];
    }
    static parse(ri, header, body) {
        const iff = new InvokeFileFailedMessage();
        iff.sender = header[1];
        iff.receiver = header[2];
        if (iff.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${iff.sender} ，receiver：${iff.receiver}`);
        const p_body = JSON.parse(body.toString());
        iff.messageID = p_body[0];
        iff.id = p_body[1];
        iff.error = p_body[2];
        return iff;
    }
    static create(ri, rm, err) {
        const iff = new InvokeFileFailedMessage();
        iff.sender = ri.moduleName;
        iff.receiver = rm.sender;
        iff.messageID = rm.messageID;
        iff.id = rm.id;
        iff.error = err.message;
        return iff;
    }
}
exports.InvokeFileFailedMessage = InvokeFileFailedMessage;
class InvokeFileFinishMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.invoke_file_finish;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, this.receiver]),
            Buffer.from(JSON.stringify([this.messageID, this.id]))
        ];
    }
    static parse(ri, header, body) {
        const iff = new InvokeFileFinishMessage();
        iff.sender = header[1];
        iff.receiver = header[2];
        if (iff.receiver !== ri.moduleName)
            throw new Error(`收到了不属于自己的消息。sender：${iff.sender} ，receiver：${iff.receiver}`);
        const p_body = JSON.parse(body.toString());
        iff.messageID = p_body[0];
        iff.id = p_body[1];
        return iff;
    }
    static create(ri, rm) {
        const iff = new InvokeFileFinishMessage();
        iff.sender = ri.moduleName;
        iff.receiver = rm.sender;
        iff.messageID = rm.messageID;
        iff.id = rm.id;
        return iff;
    }
}
exports.InvokeFileFinishMessage = InvokeFileFinishMessage;
class BroadcastMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.broadcast;
    }
    pack() {
        return [
            JSON.stringify([this.type, this.sender, null, this.path]),
            Buffer.from(JSON.stringify(this.data))
        ];
    }
    static parse(ri, header, body) {
        const bm = new BroadcastMessage();
        bm.sender = header[1];
        bm.path = header[3];
        if (bm.path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        bm.data = JSON.parse(body.toString());
        return bm;
    }
    static create(ri, path, data) {
        if (path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        const bm = new BroadcastMessage();
        bm.sender = ri.moduleName;
        bm.path = path;
        bm.data = data;
        return bm;
    }
}
exports.BroadcastMessage = BroadcastMessage;
class BroadcastOpenMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.broadcast_open;
    }
    pack() {
        return [
            JSON.stringify([this.type]),
            Buffer.from(JSON.stringify([this.messageID, this.broadcastSender, this.path]))
        ];
    }
    static parse(ri, header, body) {
        const bom = new BroadcastOpenMessage();
        const p_body = JSON.parse(body.toString());
        bom.messageID = p_body[0];
        bom.broadcastSender = p_body[1];
        bom.path = p_body[2];
        if (bom.broadcastSender !== ri.moduleName)
            throw new Error(`对方尝试打开不属于自己的广播。对方所期待的广播发送者:${bom.broadcastSender}`);
        if (bom.path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        return bom;
    }
    static create(ri, messageID, broadcastSender, path) {
        if (path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        const bom = new BroadcastOpenMessage();
        bom.messageID = messageID;
        bom.broadcastSender = broadcastSender;
        bom.path = path;
        return bom;
    }
}
exports.BroadcastOpenMessage = BroadcastOpenMessage;
class BroadcastOpenFinishMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.broadcast_open_finish;
    }
    pack() {
        return [
            JSON.stringify([this.type]),
            Buffer.from(this.messageID.toString())
        ];
    }
    static parse(ri, header, body) {
        const bof = new BroadcastOpenFinishMessage();
        bof.messageID = Number.parseInt(body.toString());
        return bof;
    }
    static create(ri, bom) {
        const bof = new BroadcastOpenFinishMessage();
        bof.messageID = bom.messageID;
        return bof;
    }
}
exports.BroadcastOpenFinishMessage = BroadcastOpenFinishMessage;
class BroadcastCloseMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.broadcast_close;
    }
    pack() {
        return [
            JSON.stringify([this.type]),
            Buffer.from(JSON.stringify([this.messageID, this.broadcastSender, this.path]))
        ];
    }
    static parse(ri, header, body) {
        const bcm = new BroadcastCloseMessage();
        const p_body = JSON.parse(body.toString());
        bcm.messageID = p_body[0];
        bcm.broadcastSender = p_body[1];
        bcm.path = p_body[2];
        if (bcm.broadcastSender !== ri.moduleName)
            throw new Error(`对方尝试关闭不属于自己的广播。对方所期待的广播发送者:${bcm.broadcastSender}`);
        if (bcm.path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        return bcm;
    }
    static create(ri, messageID, broadcastSender, path) {
        if (path.length > 256)
            throw new Error('消息的path长度超出了规定的256个字符');
        const bcm = new BroadcastCloseMessage();
        bcm.messageID = messageID;
        bcm.broadcastSender = broadcastSender;
        bcm.path = path;
        return bcm;
    }
}
exports.BroadcastCloseMessage = BroadcastCloseMessage;
class BroadcastCloseFinishMessage extends MessageData {
    constructor() {
        super(...arguments);
        this.type = MessageType_1.MessageType.broadcast_close_finish;
    }
    pack() {
        return [
            JSON.stringify([this.type]),
            Buffer.from(this.messageID.toString())
        ];
    }
    static parse(ri, header, body) {
        const bcf = new BroadcastCloseFinishMessage();
        bcf.messageID = Number.parseInt(body.toString());
        return bcf;
    }
    static create(ri, bom) {
        const bcf = new BroadcastCloseFinishMessage();
        bcf.messageID = bom.messageID;
        return bcf;
    }
}
exports.BroadcastCloseFinishMessage = BroadcastCloseFinishMessage;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
