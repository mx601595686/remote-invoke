"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const binary_ws_1 = require("binary-ws");
const BaseSocket_1 = require("binary-ws/bin/common/BaseSocket");
/**
 * 这是一个基于binary-ws的ConnectionPort实现类，
 * 使用时直接将binary-ws的socket传入构造函数即可。
 *
 * 注意：如果发送的是一个数组，则数组会自动使用BaseSocket.serialize进行序列化
 *
 * @export
 * @class BinaryWsConnectionPort
 * @implements {ConnectionPort}
 */
class BinaryWsConnectionPort {
    constructor(_socket) {
        this._socket = _socket;
        _socket.once('open', () => {
            this.onOpen && this.onOpen();
        });
        _socket.once('close', () => {
            this.onClose && this.onClose();
        });
        _socket.on('message', (name, data) => {
            if (this.onMessage !== undefined) {
                const title = JSON.parse(name);
                const message = {
                    sender: title[0],
                    receiver: title[1],
                    messageName: title[2],
                    type: title[3],
                    sendTime: title[4],
                    expire: title[5],
                    data: data[0] ? BaseSocket_1.BaseSocket.deserialize(data[1]) : data[1],
                    messageID: data[2],
                    error: data[3]
                };
                this.onMessage(message);
            }
        });
        if (_socket.readyState === binary_ws_1.ReadyState.OPEN)
            setTimeout(() => this.onOpen && this.onOpen(), 0);
    }
    send(data) {
        const now = (new Date).getTime();
        if (data.expire === 0 || data.expire > now) {
            const title = [
                data.sender,
                data.receiver,
                data.messageName,
                data.type,
                data.sendTime,
                data.expire
            ];
            const dataIsArray = Array.isArray(data.data);
            const body = [
                dataIsArray,
                dataIsArray ? BaseSocket_1.BaseSocket.serialize(data.data) : data.data,
                data.messageID,
                data.error
            ];
            const sending = this._socket.send(JSON.stringify(title), body, false);
            if (data.expire !== 0) {
                //超时取消发送
                const timer = setTimeout(() => {
                    this._socket.cancel(sending.messageID);
                }, data.expire - now);
                return sending.then(() => { clearTimeout(timer); }).catch((err) => { clearTimeout(timer); throw err; });
            }
            else
                return sending;
        }
        else
            return Promise.reject(new Error('调用超时'));
    }
    close() {
        this._socket.close();
    }
}
exports.BinaryWsConnectionPort = BinaryWsConnectionPort;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudHMvYmluYXJ5LXdzL0JpbmFyeVdzQ29ubmVjdGlvblBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBdUM7QUFDdkMsZ0VBQTZEO0FBSTdEOzs7Ozs7Ozs7R0FTRztBQUNIO0lBRUksWUFBcUIsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBVztZQUNwQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sS0FBSyxHQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzFDLE1BQU0sT0FBTyxHQUFnQjtvQkFDekIsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNsQixXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDckIsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2QsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLHVCQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3pELFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDakIsQ0FBQztnQkFDRixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssc0JBQVUsQ0FBQyxJQUFJLENBQUM7WUFDdkMsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFpQjtRQUNsQixNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sS0FBSyxHQUFjO2dCQUNyQixJQUFJLENBQUMsTUFBTTtnQkFDWCxJQUFJLENBQUMsUUFBUTtnQkFDYixJQUFJLENBQUMsV0FBVztnQkFDaEIsSUFBSSxDQUFDLElBQUk7Z0JBQ1QsSUFBSSxDQUFDLFFBQVE7Z0JBQ2IsSUFBSSxDQUFDLE1BQU07YUFDZCxDQUFDO1lBRUYsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsTUFBTSxJQUFJLEdBQWE7Z0JBQ25CLFdBQVc7Z0JBQ1gsV0FBVyxHQUFHLHVCQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSTtnQkFDekQsSUFBSSxDQUFDLFNBQVM7Z0JBQ2QsSUFBSSxDQUFDLEtBQUs7YUFDYixDQUFDO1lBRUYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFdEUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixRQUFRO2dCQUNSLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQztvQkFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRyxDQUFDO1lBQUMsSUFBSTtnQkFDRixNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLENBQUM7UUFBQyxJQUFJO1lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUtKO0FBM0VELHdEQTJFQyIsImZpbGUiOiJpbXBsZW1lbnRzL2JpbmFyeS13cy9CaW5hcnlXc0Nvbm5lY3Rpb25Qb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZHlTdGF0ZSB9IGZyb20gJ2JpbmFyeS13cyc7XHJcbmltcG9ydCB7IEJhc2VTb2NrZXQgfSBmcm9tICdiaW5hcnktd3MvYmluL2NvbW1vbi9CYXNlU29ja2V0JztcclxuaW1wb3J0IHsgQ29ubmVjdGlvblBvcnQsIFNlbmRpbmdEYXRhIH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xyXG5pbXBvcnQgeyBEYXRhVGl0bGUsIERhdGFCb2R5IH0gZnJvbSAnLi9EYXRhRm9ybWF0JztcclxuXHJcbi8qKlxyXG4gKiDov5nmmK/kuIDkuKrln7rkuo5iaW5hcnktd3PnmoRDb25uZWN0aW9uUG9ydOWunueOsOexu++8jFxyXG4gKiDkvb/nlKjml7bnm7TmjqXlsIZiaW5hcnktd3PnmoRzb2NrZXTkvKDlhaXmnoTpgKDlh73mlbDljbPlj6/jgIIgICBcclxuICogXHJcbiAqIOazqOaEj++8muWmguaenOWPkemAgeeahOaYr+S4gOS4quaVsOe7hO+8jOWImeaVsOe7hOS8muiHquWKqOS9v+eUqEJhc2VTb2NrZXQuc2VyaWFsaXpl6L+b6KGM5bqP5YiX5YyWXHJcbiAqIFxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBCaW5hcnlXc0Nvbm5lY3Rpb25Qb3J0XHJcbiAqIEBpbXBsZW1lbnRzIHtDb25uZWN0aW9uUG9ydH1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCaW5hcnlXc0Nvbm5lY3Rpb25Qb3J0IGltcGxlbWVudHMgQ29ubmVjdGlvblBvcnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IF9zb2NrZXQ6IEJhc2VTb2NrZXQpIHtcclxuICAgICAgICBfc29ja2V0Lm9uY2UoJ29wZW4nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25PcGVuICYmIHRoaXMub25PcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF9zb2NrZXQub25jZSgnY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSAmJiB0aGlzLm9uQ2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgX3NvY2tldC5vbignbWVzc2FnZScsIChuYW1lLCBkYXRhOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbk1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGU6IERhdGFUaXRsZSA9IEpTT04ucGFyc2UobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlOiBTZW5kaW5nRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHRpdGxlWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyOiB0aXRsZVsxXSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTmFtZTogdGl0bGVbMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdGl0bGVbM10sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZFRpbWU6IHRpdGxlWzRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZTogdGl0bGVbNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YVswXSA/IEJhc2VTb2NrZXQuZGVzZXJpYWxpemUoZGF0YVsxXSkgOiBkYXRhWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJRDogZGF0YVsyXSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZGF0YVszXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChfc29ja2V0LnJlYWR5U3RhdGUgPT09IFJlYWR5U3RhdGUuT1BFTilcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9uT3BlbiAmJiB0aGlzLm9uT3BlbigpLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kKGRhdGE6IFNlbmRpbmdEYXRhKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgaWYgKGRhdGEuZXhwaXJlID09PSAwIHx8IGRhdGEuZXhwaXJlID4gbm93KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlOiBEYXRhVGl0bGUgPSBbXHJcbiAgICAgICAgICAgICAgICBkYXRhLnNlbmRlcixcclxuICAgICAgICAgICAgICAgIGRhdGEucmVjZWl2ZXIsXHJcbiAgICAgICAgICAgICAgICBkYXRhLm1lc3NhZ2VOYW1lLFxyXG4gICAgICAgICAgICAgICAgZGF0YS50eXBlLFxyXG4gICAgICAgICAgICAgICAgZGF0YS5zZW5kVGltZSxcclxuICAgICAgICAgICAgICAgIGRhdGEuZXhwaXJlXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGF0YS5kYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgYm9keTogRGF0YUJvZHkgPSBbXHJcbiAgICAgICAgICAgICAgICBkYXRhSXNBcnJheSxcclxuICAgICAgICAgICAgICAgIGRhdGFJc0FycmF5ID8gQmFzZVNvY2tldC5zZXJpYWxpemUoZGF0YS5kYXRhKSA6IGRhdGEuZGF0YSxcclxuICAgICAgICAgICAgICAgIGRhdGEubWVzc2FnZUlELFxyXG4gICAgICAgICAgICAgICAgZGF0YS5lcnJvclxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VuZGluZyA9IHRoaXMuX3NvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHRpdGxlKSwgYm9keSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEuZXhwaXJlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvL+i2heaXtuWPlua2iOWPkemAgVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXQuY2FuY2VsKHNlbmRpbmcubWVzc2FnZUlEKTtcclxuICAgICAgICAgICAgICAgIH0sIGRhdGEuZXhwaXJlIC0gbm93KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZGluZy50aGVuKCgpID0+IHsgY2xlYXJUaW1lb3V0KHRpbWVyKSB9KS5jYXRjaCgoZXJyKSA9PiB7IGNsZWFyVGltZW91dCh0aW1lcik7IHRocm93IGVycjsgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbmRpbmc7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ+iwg+eUqOi2heaXticpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1lc3NhZ2U/OiAoZGF0YTogU2VuZGluZ0RhdGEpID0+IHZvaWQ7XHJcbiAgICBvbkNsb3NlPzogKCkgPT4gdm9pZDtcclxuICAgIG9uT3Blbj86ICgpID0+IHZvaWQ7XHJcbn0iXX0=
