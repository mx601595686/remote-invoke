"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const binary_ws_1 = require("binary-ws");
/**
 * 这是一个基于binary-ws的ConnectionPort实现类，
 * 使用时直接将binary-ws的socket传入构造函数即可。
 *
 * @export
 * @class BinaryWsConnectionPort
 * @implements {ConnectionPort}
 */
class BinaryWsConnectionPort {
    constructor(_socket) {
        this._socket = _socket;
        _socket.once('open', () => {
            this.onOpen && this.onOpen();
        });
        _socket.once('close', () => {
            this.onClose && this.onClose();
        });
        _socket.on('message', (title, data) => {
            if (this.onMessage !== undefined) {
                const message = {
                    sender: title[0],
                    receiver: title[1],
                    messageName: title[2],
                    type: title[3],
                    sendTime: title[4],
                    expire: title[5],
                    data: data[0],
                    messageID: data[1],
                    error: data[2]
                };
                this.onMessage(message);
            }
        });
        if (_socket.readyState === binary_ws_1.ReadyState.OPEN)
            setTimeout(() => this.onOpen && this.onOpen(), 0);
    }
    send(data) {
        const now = (new Date).getTime();
        if (data.expire === 0 || data.expire > now) {
            const title = [
                data.sender,
                data.receiver,
                data.messageName,
                data.type,
                data.sendTime,
                data.expire
            ];
            const body = [
                data.data,
                data.messageID,
                data.error
            ];
            const sending = this._socket.send(title, body, false);
            if (data.expire !== 0) {
                //超时取消发送
                const timer = setTimeout(() => {
                    this._socket.cancel(sending.messageID);
                }, data.expire - now);
                return sending.then(() => { clearTimeout(timer); }).catch((err) => { clearTimeout(timer); throw err; });
            }
            else
                return sending;
        }
        else
            return Promise.reject(new Error('发送超时'));
    }
    close() {
        this._socket.close();
    }
}
exports.BinaryWsConnectionPort = BinaryWsConnectionPort;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudHMvYmluYXJ5LXdzL0JpbmFyeVdzQ29ubmVjdGlvblBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBdUM7QUFLdkM7Ozs7Ozs7R0FPRztBQUNIO0lBRUksWUFBcUIsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFVLEVBQUUsSUFBVztZQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sT0FBTyxHQUFnQjtvQkFDekIsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNsQixXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDckIsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2QsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ2pCLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLHNCQUFVLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFJLENBQUMsSUFBaUI7UUFDbEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLEtBQUssR0FBYztnQkFDckIsSUFBSSxDQUFDLE1BQU07Z0JBQ1gsSUFBSSxDQUFDLFFBQVE7Z0JBQ2IsSUFBSSxDQUFDLFdBQVc7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJO2dCQUNULElBQUksQ0FBQyxRQUFRO2dCQUNiLElBQUksQ0FBQyxNQUFNO2FBQ2QsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFhO2dCQUNuQixJQUFJLENBQUMsSUFBSTtnQkFDVCxJQUFJLENBQUMsU0FBUztnQkFDZCxJQUFJLENBQUMsS0FBSzthQUNiLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXRELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsUUFBUTtnQkFDUixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0csQ0FBQztZQUFDLElBQUk7Z0JBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN2QixDQUFDO1FBQUMsSUFBSTtZQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FLSjtBQXhFRCx3REF3RUMiLCJmaWxlIjoiaW1wbGVtZW50cy9iaW5hcnktd3MvQmluYXJ5V3NDb25uZWN0aW9uUG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWR5U3RhdGUgfSBmcm9tICdiaW5hcnktd3MnO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0IH0gZnJvbSAnYmluYXJ5LXdzL2Jpbi9jb21tb24vQmFzZVNvY2tldCc7XHJcbmltcG9ydCB7IENvbm5lY3Rpb25Qb3J0LCBTZW5kaW5nRGF0YSB9IGZyb20gJy4uLy4uL2luZGV4JztcclxuaW1wb3J0IHsgRGF0YVRpdGxlLCBEYXRhQm9keSB9IGZyb20gJy4vRGF0YUZvcm1hdCc7XHJcblxyXG4vKipcclxuICog6L+Z5piv5LiA5Liq5Z+65LqOYmluYXJ5LXdz55qEQ29ubmVjdGlvblBvcnTlrp7njrDnsbvvvIxcclxuICog5L2/55So5pe255u05o6l5bCGYmluYXJ5LXdz55qEc29ja2V05Lyg5YWl5p6E6YCg5Ye95pWw5Y2z5Y+v44CCICAgXHJcbiAqIFxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBCaW5hcnlXc0Nvbm5lY3Rpb25Qb3J0XHJcbiAqIEBpbXBsZW1lbnRzIHtDb25uZWN0aW9uUG9ydH1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCaW5hcnlXc0Nvbm5lY3Rpb25Qb3J0IGltcGxlbWVudHMgQ29ubmVjdGlvblBvcnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IF9zb2NrZXQ6IEJhc2VTb2NrZXQpIHtcclxuICAgICAgICBfc29ja2V0Lm9uY2UoJ29wZW4nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25PcGVuICYmIHRoaXMub25PcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF9zb2NrZXQub25jZSgnY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSAmJiB0aGlzLm9uQ2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgX3NvY2tldC5vbignbWVzc2FnZScsICh0aXRsZTogYW55LCBkYXRhOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbk1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZTogU2VuZGluZ0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiB0aXRsZVswXSxcclxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlcjogdGl0bGVbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU5hbWU6IHRpdGxlWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRpdGxlWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRUaW1lOiB0aXRsZVs0XSxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcmU6IHRpdGxlWzVdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlEOiBkYXRhWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBkYXRhWzJdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKF9zb2NrZXQucmVhZHlTdGF0ZSA9PT0gUmVhZHlTdGF0ZS5PUEVOKVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25PcGVuICYmIHRoaXMub25PcGVuKCksIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmQoZGF0YTogU2VuZGluZ0RhdGEpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBub3cgPSAobmV3IERhdGUpLmdldFRpbWUoKTtcclxuICAgICAgICBpZiAoZGF0YS5leHBpcmUgPT09IDAgfHwgZGF0YS5leHBpcmUgPiBub3cpIHtcclxuICAgICAgICAgICAgY29uc3QgdGl0bGU6IERhdGFUaXRsZSA9IFtcclxuICAgICAgICAgICAgICAgIGRhdGEuc2VuZGVyLFxyXG4gICAgICAgICAgICAgICAgZGF0YS5yZWNlaXZlcixcclxuICAgICAgICAgICAgICAgIGRhdGEubWVzc2FnZU5hbWUsXHJcbiAgICAgICAgICAgICAgICBkYXRhLnR5cGUsXHJcbiAgICAgICAgICAgICAgICBkYXRhLnNlbmRUaW1lLFxyXG4gICAgICAgICAgICAgICAgZGF0YS5leHBpcmVcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJvZHk6IERhdGFCb2R5ID0gW1xyXG4gICAgICAgICAgICAgICAgZGF0YS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgZGF0YS5tZXNzYWdlSUQsXHJcbiAgICAgICAgICAgICAgICBkYXRhLmVycm9yXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZW5kaW5nID0gdGhpcy5fc29ja2V0LnNlbmQodGl0bGUsIGJvZHksIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLmV4cGlyZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy/otoXml7blj5bmtojlj5HpgIFcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc29ja2V0LmNhbmNlbChzZW5kaW5nLm1lc3NhZ2VJRCk7XHJcbiAgICAgICAgICAgICAgICB9LCBkYXRhLmV4cGlyZSAtIG5vdyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbmRpbmcudGhlbigoKSA9PiB7IGNsZWFyVGltZW91dCh0aW1lcikgfSkuY2F0Y2goKGVycikgPT4geyBjbGVhclRpbWVvdXQodGltZXIpOyB0aHJvdyBlcnI7IH0pO1xyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZW5kaW5nO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCflj5HpgIHotoXml7YnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25NZXNzYWdlPzogKGRhdGE6IFNlbmRpbmdEYXRhKSA9PiB2b2lkO1xyXG4gICAgb25DbG9zZT86ICgpID0+IHZvaWQ7XHJcbiAgICBvbk9wZW4/OiAoKSA9PiB2b2lkO1xyXG59Il19
