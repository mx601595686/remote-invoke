"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 这是一个基于binary-ws的ConnectionPort实现
 * 使用时直接将binary-ws的socket传入构造函数即可
 *
 * @export
 * @class BinaryWsConnectionPort
 * @implements {ConnectionPort}
 */
class BinaryWsConnectionPort {
    constructor(_socket) {
        this._socket = _socket;
        _socket.on('open', () => {
            this.onOpen && this.onOpen();
        });
        _socket.on('close', () => {
            this.onClose && this.onClose();
        });
        _socket.on('message', (name, data) => {
            if (this.onMessage !== undefined) {
                const title = JSON.parse(name);
                const body = data;
                this.onMessage(Object.assign(title, {
                    messageID: body[0],
                    data: body[1],
                    error: data[2]
                }));
            }
        });
    }
    send(data) {
        const title = {
            sender: data.sender,
            receiver: data.receiver,
            messageName: data.messageName,
            type: data.type,
            sendTime: data.sendTime,
            expire: data.expire
        };
        const body = [data.messageID, data.data, data.error];
        return this._socket.send(JSON.stringify(title), body);
    }
    close() {
        this._socket.close();
    }
}
exports.BinaryWsConnectionPort = BinaryWsConnectionPort;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudHMvYmluYXJ5LXdzL0JpbmFyeVdzQ29ubmVjdGlvblBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQTs7Ozs7OztHQU9HO0FBQ0g7SUFFSSxZQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25DLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUk7WUFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixNQUFNLEtBQUssR0FBYyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLElBQUksR0FBRyxJQUFnQixDQUFDO2dCQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO29CQUNoQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ2pCLENBQUMsQ0FBQyxDQUFDO1lBQ1IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFpQjtRQUNsQixNQUFNLEtBQUssR0FBYztZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3RCLENBQUM7UUFFRixNQUFNLElBQUksR0FBYSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FLSjtBQTdDRCx3REE2Q0MiLCJmaWxlIjoiaW1wbGVtZW50cy9iaW5hcnktd3MvQmluYXJ5V3NDb25uZWN0aW9uUG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VTb2NrZXQgfSBmcm9tICdiaW5hcnktd3MvYmluL2NvbW1vbi9CYXNlU29ja2V0JztcclxuaW1wb3J0IHsgQ29ubmVjdGlvblBvcnQsIFNlbmRpbmdEYXRhIH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xyXG5pbXBvcnQgeyBEYXRhQm9keSwgRGF0YVRpdGxlIH0gZnJvbSAnLi9EYXRhRm9ybWF0JztcclxuXHJcbi8qKlxyXG4gKiDov5nmmK/kuIDkuKrln7rkuo5iaW5hcnktd3PnmoRDb25uZWN0aW9uUG9ydOWunueOsFxyXG4gKiDkvb/nlKjml7bnm7TmjqXlsIZiaW5hcnktd3PnmoRzb2NrZXTkvKDlhaXmnoTpgKDlh73mlbDljbPlj69cclxuICogXHJcbiAqIEBleHBvcnRcclxuICogQGNsYXNzIEJpbmFyeVdzQ29ubmVjdGlvblBvcnRcclxuICogQGltcGxlbWVudHMge0Nvbm5lY3Rpb25Qb3J0fVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJpbmFyeVdzQ29ubmVjdGlvblBvcnQgaW1wbGVtZW50cyBDb25uZWN0aW9uUG9ydCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfc29ja2V0OiBCYXNlU29ja2V0KSB7XHJcbiAgICAgICAgX3NvY2tldC5vbignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbk9wZW4gJiYgdGhpcy5vbk9wZW4oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgX3NvY2tldC5vbignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSAmJiB0aGlzLm9uQ2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgX3NvY2tldC5vbignbWVzc2FnZScsIChuYW1lLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aXRsZTogRGF0YVRpdGxlID0gSlNPTi5wYXJzZShuYW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBkYXRhIGFzIERhdGFCb2R5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2UoT2JqZWN0LmFzc2lnbih0aXRsZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJRDogYm9keVswXSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBib2R5WzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBkYXRhWzJdXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kKGRhdGE6IFNlbmRpbmdEYXRhKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgdGl0bGU6IERhdGFUaXRsZSA9IHtcclxuICAgICAgICAgICAgc2VuZGVyOiBkYXRhLnNlbmRlcixcclxuICAgICAgICAgICAgcmVjZWl2ZXI6IGRhdGEucmVjZWl2ZXIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VOYW1lOiBkYXRhLm1lc3NhZ2VOYW1lLFxyXG4gICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUsXHJcbiAgICAgICAgICAgIHNlbmRUaW1lOiBkYXRhLnNlbmRUaW1lLFxyXG4gICAgICAgICAgICBleHBpcmU6IGRhdGEuZXhwaXJlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgYm9keTogRGF0YUJvZHkgPSBbZGF0YS5tZXNzYWdlSUQsIGRhdGEuZGF0YSwgZGF0YS5lcnJvcl07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHRpdGxlKSwgYm9keSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25NZXNzYWdlPzogKGRhdGE6IFNlbmRpbmdEYXRhKSA9PiB2b2lkO1xyXG4gICAgb25DbG9zZT86ICgpID0+IHZvaWQ7XHJcbiAgICBvbk9wZW4/OiAoKSA9PiB2b2lkO1xyXG59Il19
