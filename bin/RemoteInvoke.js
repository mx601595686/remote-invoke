"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_formatter_1 = require("log-formatter");
const MessageType_1 = require("./common/MessageType");
const SendingManager_1 = require("./SendingManager");
/**
 *  远程调用控制器
 *
 * @export
 * @class RemoteInvoke
 */
class RemoteInvoke extends SendingManager_1.SendingManager {
    constructor(config) {
        super(config);
        this._invokeCallback = new Map(); // 注册调用回调
        /**
         * 对外导出的方法列表
         */
        this.exportList = new Map();
        /**
         * 注册的广播接收器
         *
         * key：moduleName -> messageName
         */
        this.receiveList = new Map();
        this.moduleName = config.moduleName;
        this._reportErrorStack = !!config.reportErrorStack;
        this._timeout = config.timeout === undefined ? 0 : config.timeout < 0 ? 0 : config.timeout;
        this._invokeFailedRetry = config.invokeFailedRetry === undefined ? 0 : config.invokeFailedRetry < 0 ? 0 : config.invokeFailedRetry;
    }
    /**
     * 发送消息
     *
     * @private
     * @param {(string | undefined)} receiver 接收模块的名称
     * @param {string} messageName 消息的名称
     * @param {string} messageID 消息的编号
     * @param {MessageType} type 消息的类型
     * @param {(number | undefined)} expire 过期时间
     * @param {any} data 要发送的数据
     * @returns {Promise<void>}
     * @memberof RemoteInvoke
     */
    _send(receiver, messageName, messageID, type, expire, data, error) {
        const sendingData = {
            sender: this.moduleName,
            receiver,
            messageID,
            messageName,
            type,
            sendTime: (new Date).getTime(),
            expire,
            data,
            error: error === undefined ? undefined : { message: error.message, stack: this._reportErrorStack ? error.stack : undefined }
        };
        return super._sendData(sendingData);
    }
    /**
     * 接收消息
     *
     * @protected
     * @param {SendingData} data 收到的数据
     * @memberof RemoteInvoke
     */
    _onMessage(data) {
        switch (data.type) {
            case MessageType_1.MessageType.invoke:
                if (data.receiver !== this.moduleName) {
                    this._errorLog('收到了不属于自己的消息', data);
                }
                else if (data.expire === 0 || data.expire > (new Date).getTime()) {
                    const func = this.exportList.get(data.messageName);
                    const send = this._send.bind(this, data.sender, undefined, data.messageID, MessageType_1.MessageType.replyInvoke, data.expire);
                    if (func !== undefined) {
                        //确保执行完了也在过期时间之内
                        func(data.data)
                            .then((result) => [result])
                            .catch((err) => [undefined, err])
                            .then(result => {
                            if (data.expire === 0 || data.expire > (new Date).getTime())
                                send(...result).catch(() => { });
                        });
                    }
                    else {
                        send(undefined, new Error('调用远端模块的方法不存在或者没有被导出')).catch(() => { });
                    }
                }
                break;
            case MessageType_1.MessageType.replyInvoke:
                if (data.receiver !== this.moduleName) {
                    this._errorLog('收到了不属于自己的消息', data);
                }
                else {
                    const ctrl = this._invokeCallback.get(data.messageID);
                    if (ctrl !== undefined) {
                        if (ctrl.targetName !== data.sender) {
                            ctrl.reject(new Error(`远端调用返回的结果并不是由期望的被调用者返回的！\r\n期望的被调用者：${ctrl.targetName}   实际返回结果的被调用者：${data.sender}`));
                        }
                        else {
                            if (data.error === undefined)
                                ctrl.resolve(data.data);
                            else {
                                const err = new Error(data.error.message);
                                if (data.error.stack !== undefined)
                                    err.stack = data.error.stack;
                                ctrl.reject(err);
                            }
                        }
                    }
                }
                break;
            case MessageType_1.MessageType.broadcast:
                if (data.sender === undefined) {
                    this._errorLog('收到了没有指明发送者的广播', data);
                }
                else if (data.messageName === undefined) {
                    this._errorLog('收到了消息名称为空的广播', data);
                }
                else if (data.expire === 0 || data.expire > (new Date).getTime()) {
                    const _module = this.receiveList.get(data.sender);
                    const receivers = _module && _module.get(data.messageName);
                    if (receivers !== undefined) {
                        receivers(data.data);
                    }
                    else {
                        this._errorLog('收到了自己没有注册过的广播', data);
                    }
                }
                break;
            default:
                this._errorLog('收到了不存在的消息类型', data);
                break;
        }
    }
    /**
     * 打印错误消息
     *
     * @private
     * @param {string} description 描述
     * @param {*} data 收到的数据
     * @memberof RemoteInvoke
     */
    _errorLog(description, data) {
        if (this.hasListeners('error')) {
            this.emit('error', new Error(`模块：${this.moduleName} ${description}。收到的数据：${JSON.stringify(data)}`));
        }
        else {
            log_formatter_1.default.warn
                .location.white
                .title.yellow
                .content.yellow
                .text.yellow(`remote-invoke: 模块：${this.moduleName}`, description, `收到的数据：`, data);
        }
    }
    /**
     * 对外导出方法
     *
     * @param {string} name 要被导出的方法的名称
     * @param {Function} func 要被导出的方法
     * @returns {Function}
     * @memberof RemoteInvoke
     */
    export(name, func) {
        if (this.exportList.has(name))
            throw new Error(`方法 '${name}' 不可以重复导出。`);
        this.exportList.set(name, func);
        this.emit('export', name);
        return func;
    }
    /**
     * 取消导出方法
     *
     * @param {string} name 导出的方法的名称
     * @returns {void}
     * @memberof RemoteInvoke
     */
    cancelExport(name) {
        if (this.exportList.delete(name))
            this.emit('cancelExport', name);
    }
    /**
     * 注册广播接收器
     *
     * @param {string} sender 发送者的模块名称
     * @param {string} name 广播消息的名称
     * @param {Function} func 对应的回调方法
     * @returns {Function}
     * @memberof RemoteInvoke
     */
    receive(sender, name, func) {
        let _module = this.receiveList.get(sender);
        if (_module === undefined) {
            _module = new Map();
            this.receiveList.set(sender, _module);
        }
        if (_module.has(name))
            throw new Error(`不可以重复注册广播接收器。 '${sender}：${name}'`);
        _module.set(name, func);
        this.emit('receive', name);
        return func;
    }
    /**
     * 删除广播接收器
     *
     * @param {string} sender 发送者的模块名称
     * @param {string} name 广播消息的名称
     * @returns
     * @memberof RemoteInvoke
     */
    cancelReceive(sender, name) {
        const _module = this.receiveList.get(sender);
        if (_module && _module.delete(name))
            this.emit('cancelReceive', name);
    }
    invoke(target, name, ...args) {
        return new Promise((resolve, reject) => {
            const data = args[0];
            const timeout = args[1] === undefined ? this._timeout : args[1] < 0 ? 0 : args[1];
            const invokeFailedRetry = args[2] === undefined ? this._invokeFailedRetry : args[2] < 0 ? 0 : args[2];
            const expire = timeout === 0 ? 0 : (new Date).getTime() + timeout;
            const control = {
                messageID: RemoteInvoke._messageID++,
                targetName: target,
                resolve: (data) => {
                    resolve(data);
                    clearTimeout(timer);
                    this._invokeCallback.delete(control.messageID);
                },
                reject: (err) => {
                    if (invokeFailedRetry > 0)
                        this.invoke(target, name, data, timeout, invokeFailedRetry - 1).then(resolve).catch(reject);
                    else
                        reject(err);
                    clearTimeout(timer);
                    this._invokeCallback.delete(control.messageID);
                }
            };
            const timer = timeout === 0 ? -1 : setTimeout(() => {
                const ctrl = this._invokeCallback.get(control.messageID);
                ctrl && ctrl.reject(new Error('调用超时'));
            }, timeout);
            this._invokeCallback.set(control.messageID, control);
            this._send(target, name, control.messageID, MessageType_1.MessageType.invoke, expire, data).catch(control.reject);
        });
    }
    /**
     * 向外广播消息
     *
     * @param {string} name 消息的名称
     * @param {any} [data] 要发送的数据
     * @param {number} [timeout] 指定消息过期的毫秒数
     *
     * @returns {Promise<any>}
     * @memberof RemoteInvoke
     */
    broadcast(name, data, timeout) {
        timeout = timeout === undefined ? this._timeout : timeout < 0 ? 0 : timeout;
        const expire = timeout === 0 ? 0 : (new Date).getTime() + timeout;
        return this._send(undefined, name, RemoteInvoke._messageID++, MessageType_1.MessageType.broadcast, expire, data);
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
RemoteInvoke._messageID = 0; //消息编号从0开始
exports.RemoteInvoke = RemoteInvoke;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
